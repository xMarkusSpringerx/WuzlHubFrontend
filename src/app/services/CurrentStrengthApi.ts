/**
 * WuzlHub API
 * A simple api
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';
import {CurrentStrength} from "../model/current-strength";
import {environment} from "../../environments/environment";

@Injectable()
export class CurrentStrengthApi {
    protected basePath = environment.baseApiPath;
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     *
     *
     * @param playerId
     * @param dateTime
     */
    public CurrentStrengthByPlayerIdByDateTimeDelete (playerId: number, dateTime: Date, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/api/CurrentStrength/{playerId}/{dateTime}'
            .replace('{' + 'playerId' + '}', String(playerId))
            .replace('{' + 'dateTime' + '}', String(dateTime));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'playerId' is not null or undefined
        if (playerId === null || playerId === undefined) {
            throw new Error('Required parameter playerId was null or undefined when calling apiCurrentStrengthByPlayerIdByDateTimeDelete.');
        }
        // verify required parameter 'dateTime' is not null or undefined
        if (dateTime === null || dateTime === undefined) {
            throw new Error('Required parameter dateTime was null or undefined when calling apiCurrentStrengthByPlayerIdByDateTimeDelete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     *
     * @param playerId
     * @param dateTime
     */
    public CurrentStrengthByPlayerIdByDatetimeGet (playerId: number, dateTime: Date, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/api/CurrentStrength/{playerId}/{datetime}'
            .replace('{' + 'playerId' + '}', String(playerId))
            .replace('{' + 'dateTime' + '}', String(dateTime));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'playerId' is not null or undefined
        if (playerId === null || playerId === undefined) {
            throw new Error('Required parameter playerId was null or undefined when calling apiCurrentStrengthByPlayerIdByDatetimeGet.');
        }
        // verify required parameter 'dateTime' is not null or undefined
        if (dateTime === null || dateTime === undefined) {
            throw new Error('Required parameter dateTime was null or undefined when calling apiCurrentStrengthByPlayerIdByDatetimeGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     *
     * @param playerId
     */
    public CurrentStrengthFindallbyplayerByPlayerIdGet (playerId: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/api/CurrentStrength/findallbyplayer/{playerId}'
            .replace('{' + 'playerId' + '}', String(playerId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'playerId' is not null or undefined
        if (playerId === null || playerId === undefined) {
            throw new Error('Required parameter playerId was null or undefined when calling apiCurrentStrengthFindallbyplayerByPlayerIdGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     *
     * @param playerId
     */
    public CurrentStrengthFindcurrentstrengthofplayerByPlayerIdGet (playerId: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/api/CurrentStrength/findcurrentstrengthofplayer/{playerId}'
            .replace('{' + 'playerId' + '}', String(playerId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'playerId' is not null or undefined
        if (playerId === null || playerId === undefined) {
            throw new Error('Required parameter playerId was null or undefined when calling apiCurrentStrengthFindcurrentstrengthofplayerByPlayerIdGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     *
     * @param currentStrength
     */
    public CurrentStrengthPost (currentStrength?: CurrentStrength, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/api/CurrentStrength';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(currentStrength);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
