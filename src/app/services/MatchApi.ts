/**
 * WuzlHub API
 * A simple api
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';
import {Match} from "../model/match";
import {environment} from "../../environments/environment";

@Injectable()
export class MatchApi {
    protected basePath = environment.baseApiPath;
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
        this.defaultHeaders.append("Content-Type", "application/json");
    }

    /**
     *
     *
     * @param id
     * @param match
     */
    public MatchByIdPut (id: number, match?: Match, extraHttpRequestParams?: any ) {
        const path = this.basePath + '/api/Match/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiMatchByIdPut.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(match);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     *
     * @param matchId
     */
    public MatchByMatchIdDelete (matchId: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/api/Match/{matchId}'
            .replace('{' + 'matchId' + '}', String(matchId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'matchId' is not null or undefined
        if (matchId === null || matchId === undefined) {
            throw new Error('Required parameter matchId was null or undefined when calling apiMatchByMatchIdDelete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     *
     * @param matchId
     */
    public MatchByMatchIdGet (matchId: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/api/Match/{matchId}'
            .replace('{' + 'matchId' + '}', String(matchId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'matchId' is not null or undefined
        if (matchId === null || matchId === undefined) {
            throw new Error('Required parameter matchId was null or undefined when calling apiMatchByMatchIdGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     *
     * @param tournamentId
     */
    public MatchFindbytournamentByTournamentIdGet (tournamentId: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/api/Match/findbytournament/{tournamentId}'
            .replace('{' + 'tournamentId' + '}', String(tournamentId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'tournamentId' is not null or undefined
        if (tournamentId === null || tournamentId === undefined) {
            throw new Error('Required parameter tournamentId was null or undefined when calling apiMatchFindbytournamentByTournamentIdGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     *
     */
    public MatchFindfinishedmatchesGet (extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/api/Match/findfinishedmatches';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     *
     * @param match
     */
    public MatchPost (match?: Match, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/api/Match';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(match);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
